---
resources:
  # Um objeto que representa este repositório
  ## Apenas no CI os repositórios são baixados automaticamente
  ## Em workflows, você precisa definir os repositórios e solicitar o download
  - name: qconsp-sec
    type: gitRepo
    integration: github
    versionTemplate:
      sourceName: fewbits/qconsp-sec
      branch: master

  # Integração com a Cloudflare (basicamente e-mail e chave da API)
  - name: cloudflare
    type: integration
    integration: cloudflare

  # Informações sobre a imagem de Sistema Operacional oficial da empresa
  - name: os_image
    type: version
    versionTemplate:
      versionName: "0"

jobs:
  # Atualizar o DNS do ambiente de Testes da Aplicação
  - name: dns_app_test
    type: runSh
    priority: 100
    steps:
      # Essa atividade está associada com o IP da VM de Testes da Aplicação
      ## Se o IP mudar, precisamos executar esta atividade
      - IN: vm_app_test_ip
        switch: on
      # Vou usar este repositório
      - IN: qconsp-sec
        switch: off
      # Integração com a CloudFlare (basicamente e-mail e chave de API)
      - IN: cloudflare
        switch: off
      # Agora é a tarefa...
      - TASK:
          name: dns_app_test
          runtime:
            options:
              env:
                - service_name: app
                - service_env: test
          script:
            # Solicito dados do repositório
            - pushd $(shipctl get_resource_state "qconsp-sec")/ansible
            # Chamo a automação
            - ansible-playbook dns_update.yml --extra-vars "service_name=${service_name} service_env=${service_env} vm_ip=${external_ip} cloudflare_email=${cloudflare_email} cloudflare_api=${cloudflare_api}"

  # Atualizar o DNS do ambiente de Produção da Aplicação
  - name: dns_app_prod
    type: runSh
    priority: 100
    steps:
      # Essa atividade está associada com o IP da VM de Produção da Aplicação
      ## Se o IP mudar, precisamos executar esta atividade
      - IN: vm_app_prod_ip
        switch: on
      # Vou usar este repositório
      - IN: qconsp-sec
        switch: off
      # Integração com a CloudFlare (basicamente e-mail e chave de API)
      - IN: cloudflare
        switch: off
      # Agora é a tarefa...
      - TASK:
          name: dns_app_prod
          runtime:
            options:
              env:
                - serfice_name: app
                - service_env: prod
          script:
            # Solicito dados do repositório
            - pushd $(shipctl get_resource_state "qconsp-sec")/ansible
            # Chamo a automação
            - ansible-playbook dns_update.yml --extra-vars "service_name=${service_name} service_env=${service_env} vm_ip=${external_ip} cloudflare_email=${cloudflare_email} cloudflare_api=${cloudflare_api}"

  # Atualizar o DNS do ambiente de Produção do Site
  - name: dns_site_prod
    type: runSh
    priority: 100
    steps:
      # Essa atividade está associada com o IP da VM de Produção da Aplicação
      ## Se o IP mudar, precisamos executar esta atividade
      - IN: vm_site_prod_ip
        switch: on
      # Vou usar este repositório
      - IN: qconsp-sec
        switch: off
      # Integração com a CloudFlare (basicamente e-mail e chave de API)
      - IN: cloudflare
        switch: off
      # Agora é a tarefa...
      - TASK:
          name: dns_site_prod
          runtime:
            options:
              env:
                - service_name: site
                - service_env: prod
          script:
            # Solicito dados do repositório
            - pushd $(shipctl get_resource_state "qconsp-sec")/ansible
            # Chamo a automação
            - ansible-playbook dns_update.yml --extra-vars "service_name=${service_name} service_env=${service_env} vm_ip=${external_ip} cloudflare_email=${cloudflare_email} cloudflare_api=${cloudflare_api}"

  # Criar imagem oficial da empresa
  - name: os_image_create
    type: runSh
    priority: 50
    steps:
      # Vou usar este repositório (é gatilho)
      - IN: qconsp-sec
        switch: on
      # Integração com a Google Cloud (não é gatilho)
      - IN: google_cloud
        switch: off
      # Agora é a tarefa...
      - TASK:
          name: os_image_create
          runtime:
            options:
              env:
                - GCE_CREDENTIALS_FILE_PATH: "gcp_key.json"
          script:
            # Solicito dados do repositório
            - pushd $(shipctl get_resource_state "qconsp-sec")/packer
            # Versiono o nome da imagem de acordo com a versão do job
            - shipctl replace official-image.json
            # Solicito informações de autenticação com a Google Cloud
            - echo $(shipctl get_integration_resource_field google_cloud JSON_key) > $GCE_CREDENTIALS_FILE_PATH
            - export GOOGLE_APPLICATION_CREDENTIALS=${GCE_CREDENTIALS_FILE_PATH}
            # Chamo o packer
            - packer build official-image.json
            # Versionando a imagem
            - shipctl put_resource_state os_image versionName $BUILD_NUMBER
      # A saída é a versão da imagem
      - OUT: os_image
        overwrite: true